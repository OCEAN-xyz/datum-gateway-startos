import { sdk } from '../../sdk'
const { InputSpec, Value } = sdk

export const inputSpecSpec = InputSpec.of({
  bitcoind: Value.object(
    {
      name: 'Bitcoin RPC settings',
      description: 'RPC settings for bitcoind',
    },
    InputSpec.of({
      rpcurl: Value.text({
        name: 'RPC URL',
        default: 'http://bitcoind.startos:8332',
        required: true,
        description:
          'RPC URL for communication with local bitcoind. (GBT Template Source)',
        warning: null,
        masked: false,
        placeholder: null,
        inputmode: 'text',
        patterns: [],
        minLength: null,
        maxLength: null,
      }),
      work_update_seconds: Value.number({
        name: 'Work Update (Seconds)',
        description: 'How frequently should Bitcoind send updated templates',
        warning: null,
        default: 40,
        required: false,
        min: 5,
        max: 120,
        step: null,
        integer: true,
        units: 'seconds',
        placeholder: null,
      }),
      blocknotify:
        /* TODO deal with point removed point "Block Notify" */ null as any,
    }),
  ),
  stratum: Value.object(
    {
      name: 'Stratum Server Settings',
      description: "Configure the Datum gateway's stratum server.",
    },
    InputSpec.of({
      listen_port: Value.number({
        name: 'Listen Port',
        description: 'Listening port for Stratum Gateway.',
        warning: null,
        default: 23334,
        required: false,
        min: 0,
        max: 65535,
        step: null,
        integer: false,
        units: null,
        placeholder: null,
      }),
      max_clients_per_thread: Value.number({
        name: 'Maximum Clients Per Thread',
        description: 'Maximum clients per Stratum server thread.',
        warning: null,
        default: 1000,
        required: false,
        min: 0,
        max: null,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      max_threads: Value.number({
        name: 'Max Threads',
        description: 'Maximum Stratum server threads (integer, default: 8)',
        warning: null,
        default: 8,
        required: false,
        min: 0,
        max: null,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      max_clients: Value.number({
        name: 'Max Clients',
        description:
          'Maximum total Stratum clients before rejecting connections (integer, default: 2048)',
        warning: null,
        default: 2048,
        required: false,
        min: 0,
        max: null,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      vardiff_min: Value.number({
        name: 'Minimum Difficulty',
        description: 'Work difficulty floor (integer, default: 16384)',
        warning: null,
        default: 16384,
        required: false,
        min: 0,
        max: null,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      vardiff_target_shares_min: Value.number({
        name: 'Target Shares per Minute',
        description:
          'Adjust work difficulty to target this many shares per minute (integer, default: 8)',
        warning: null,
        default: 8,
        required: false,
        min: 0,
        max: null,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      vardiff_quickdiff_count: Value.number({
        name: 'Difficulty Update Speed',
        description:
          'How many shares before considering a quick diff update (integer, default: 8)',
        warning: null,
        default: 8,
        required: false,
        min: 0,
        max: null,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      vardiff_quickdiff_delta: Value.number({
        name: 'Difficulty Delta',
        description:
          'How many times faster than our target does the miner have to be before we enforce a quick diff bump (integer, default: 8)',
        warning: null,
        default: 8,
        required: false,
        min: 0,
        max: null,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      share_stale_seconds: Value.number({
        name: 'Seconds Until Shares Considered Stale',
        description:
          'How many seconds after a job is generated before a share submission is considered stale? (integer, default: 120)',
        warning: null,
        default: 120,
        required: false,
        min: 0,
        max: null,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      fingerprint_miners: Value.toggle({
        name: 'Fingerprint Miners',
        default: true,
        description:
          'Attempt to fingerprint miners for better use of coinbase space (boolean, default: true)',
        warning: null,
      }),
    }),
  ),
  mining: Value.object(
    {
      name: 'Mining Settings',
      description: 'Mining settings',
    },
    InputSpec.of({
      pool_address: Value.text({
        name: 'Bitcoin Address',
        default: null,
        required: true,
        description:
          'Bitcoin address used for mining on DATUM Pool, and for solo mining rewards.',
        warning: null,
        masked: false,
        placeholder: null,
        inputmode: 'text',
        patterns: [
          {
            regex: '[0-9a-zA-Z]{20,88}',
            description: 'Must be a valid Bitcoin address.',
          },
        ],
        minLength: null,
        maxLength: null,
      }),
      coinbase_tag_primary: Value.text({
        name: 'Primary Coinbase Tag',
        default: 'Datum User',
        required: false,
        description:
          "Text to have in the primary coinbase tag when solo (overridden by DATUM Pool with the pool's name.)",
        warning: null,
        masked: false,
        placeholder: null,
        inputmode: 'text',
        patterns: [],
        minLength: null,
        maxLength: null,
      }),
      coinbase_tag_secondary: Value.text({
        name: 'Secondary Coinbase Tag',
        default: 'Datum Miner',
        required: false,
        description:
          "Text to have in the secondary coinbase tag. If you're mining on a pool, this is what you label your blocks with.",
        warning: null,
        masked: false,
        placeholder: null,
        inputmode: 'text',
        patterns: [],
        minLength: null,
        maxLength: null,
      }),
      coinbase_unique_id: Value.number({
          name: 'Coinbase Unique ID',
          description:
            'A unique ID between 1 and 65535. This is appended to the coinbase. Make unique per instance of datum with the same coinbase tags.',
          warning: null,
          default: 120,
          required: false,
          min: 1,
          max: 65535,
          step: null,
          integer: true,
          units: null,
          placeholder: null,
        }),
    }),
  ),
  api: Value.object(
    {
      name: 'API',
      description: 'Settings for the Datum Gateway Dashboard',
    },
    InputSpec.of({
      listen_port: Value.number({
        name: 'Listen Port',
        description: 'Listening port for Datum Gateway Dashboard.',
        warning: null,
        default: 7152,
        required: true,
        min: 0,
        max: 65535,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
    }),
  ),
  logger: Value.object(
    {
      name: 'Logger',
      description: 'Log Settings',
    },
    InputSpec.of({
      log_level_console: Value.number({
        name: 'Log Level Console',
        description:
          'Minimum log level for console messages (0=All, 1=Debug, 2=Info, 3=Warn, 4=Error, 5=Fatal) (integer, default: 2)',
        warning: null,
        default: 2,
        required: true,
        min: 0,
        max: 5,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      log_to_file: Value.toggle({
        name: 'Log to File',
        default: false,
        description: 'Enable logging of messages to a file',
        warning: null,
      }),
      log_file: Value.text({
        name: 'Log File',
        default: '/root/start9/logs.txt',
        required: false,
        description: 'Path to file to write log messages, when enabled',
        warning: null,
        masked: false,
        placeholder: null,
        inputmode: 'text',
        patterns: [],
        minLength: null,
        maxLength: null,
      }),
      log_level_file: Value.number({
        name: 'File Log Level',
        description: 'Minimum log level for log file messages',
        warning: null,
        default: 1,
        required: false,
        min: 0,
        max: 5,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
    }),
  ),
  datum: Value.object(
    {
      name: 'Datum',
      description:
        'Datum-Gateway settings. These are set to mine on OCEAN by default. Modify to switch to another Datum-supporting pool, or to solo mine.',
    },
    InputSpec.of({
      pool_host: Value.text({
        name: 'Pool Host',
        default: 'datum-beta1.mine.ocean.xyz',
        required: false,
        description:
          'Remote DATUM server host/ip to use for decentralized pooled mining (string, default: datum.mine.ocean.xyz)',
        warning: null,
        masked: false,
        placeholder: null,
        inputmode: 'text',
        patterns: [],
        minLength: null,
        maxLength: null,
      }),
      pool_port: Value.number({
        name: 'Pool Port',
        description: 'Remote DATUM server port (integer, default: 28915)',
        warning: null,
        default: 28915,
        required: false,
        min: 0,
        max: 65535,
        step: null,
        integer: true,
        units: null,
        placeholder: null,
      }),
      pool_pubkey: Value.text({
        name: 'Pool Pubkey',
        default:
          'f21f2f0ef0aa1970468f22bad9bb7f4535146f8e4a8f646bebc93da3d89b1406f40d032f09a417d94dc068055df654937922d2c89522e3e8f6f0e649de473003',
        required: false,
        description:
          'Public key of the DATUM server for initiating encrypted connection. Get from secure location, or set to empty to auto-fetch.',
        warning: null,
        masked: false,
        placeholder: null,
        inputmode: 'text',
        patterns: [],
        minLength: null,
        maxLength: null,
      }),
      pool_pass_workers: Value.toggle({
        name: 'Pool Pass Workers',
        default: true,
        description:
          'Pass stratum miner usernames as sub-worker names to the pool (boolean, default: true)',
        warning: null,
      }),
      pool_pass_full_users: Value.toggle({
        name: 'Pool Pass Full Users',
        default: true,
        description:
          'Pass stratum miner usernames as raw usernames to the pool (use if putting multiple payout addresses on miners behind this gateway)',
        warning: null,
      }),
      always_pay_self: Value.toggle({
        name: 'Always Pay Self',
        default: true,
        description:
          'Always include my datum.pool_username payout in my blocks if possible (boolean, default: true)',
        warning: null,
      }),
      reward_sharing: Value.select({
        name: 'Collaborative reward sharing (pooled mining)',
        description:
          "You can share rewards and share in others' rewards - or only get rewarded when you find a block yourself.",
        warning: null,
        default: 'require',
        values: {
          require: 'require',
          prefer: 'prefer',
          never: 'never',
        },
      } as const),
    }),
  ),
})
export const matchInputSpecSpec = inputSpecSpec.validator
export type InputSpecSpec = typeof matchInputSpecSpec._TYPE
